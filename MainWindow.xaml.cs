using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using MHW_Editor.Armors;
using MHW_Editor.Assets;
using MHW_Editor.Gems;
using MHW_Editor.Items;
using MHW_Editor.Models;
using MHW_Editor.Weapons;
using MHW_Template.Weapons;
using Microsoft.Win32;

namespace MHW_Editor {
    public partial class MainWindow {
        private const bool ENABLE_CHEAT_BUTTONS = true;
        private static readonly string[] FILE_TYPES = {
            "*.wp_dat",
            "*.wp_dat_g",
            "*.am_dat",
            "*.sgpa",
            "*.itm",
            "*.bbtbl",
            "*.arm_up",
            "*.kire",
            "*.skl_dat",
            "*.shl_tbl"
        };

        private readonly List<dynamic> items = new List<dynamic>();
        private string targetFile;

        public MainWindow() {
            InitializeComponent();

            dg_items.AutoGeneratingColumn += Dg_items_AutoGeneratingColumn;
            dg_items.AutoGeneratedColumns += Dg_items_AutoGeneratedColumns;
            dg_items.GotFocus += dg_items_GotFocus;

            btn_open.Click += Btn_open_Click;
            btn_save.Click += Btn_save_Click;
            btn_slot_cheat.Click += Btn_slot_cheat_Click;
            btn_set_bonus_cheat.Click += Btn_set_bonus_cheat_Click;
            btn_skill_level_cheat.Click += Btn_skill_level_cheat_Click;
            btn_zenny_cheat.Click += Btn_zenny_cheat_Click;
            btn_damage_cheat.Click += Btn_damage_cheat_Click;
            btn_enable_all_coatings_cheat.Click += Btn_enable_all_coatings_cheat_Click;
            btn_max_sharpness_cheat.Click += Btn_max_sharpness_cheat_Click;

            Width = SystemParameters.MaximizedPrimaryScreenWidth * 0.8;
            Height = SystemParameters.MaximizedPrimaryScreenHeight * 0.5;
        }

        private void Dg_items_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e) {
            Debug.Assert(e.PropertyName != null, "e.PropertyName != null");

            switch (e.PropertyName) {
                case nameof(IMhwItem.Bytes):
                case nameof(IMhwItem.Changed):
                    e.Cancel = true;
                    break;
                case nameof(Ranged.Muzzle_Type):
                case nameof(Ranged.Barrel_Type):
                case nameof(Ranged.Magazine_Type):
                case nameof(Ranged.Scope_Type):
                case nameof(Ranged.Shell_Type_Id):
                case nameof(Ranged.Deviation):
                    e.Cancel = IsBow();
                    break;
                case nameof(IMhwItem.Name):
                    e.Cancel = IsBottleTable() || IsArmUp() || IsSharpness() || IsShellTable();
                    break;
                default:
                    e.Cancel = e.PropertyName.EndsWith("Raw") || e.PropertyName.EndsWith("___");
                    break;
            }

            if (e.Cancel) return;

            switch (e.PropertyName) {
                case nameof(Armor.Set_Skill_1):
                case nameof(Armor.Set_Skill_2):
                case nameof(Armor.Skill_1):
                case nameof(Armor.Skill_2):
                case nameof(Armor.Skill_3):
                case nameof(Melee.Skill): {
                    var cb = new DataGridComboBoxColumn {
                        Header = e.Column.Header,
                        ItemsSource = DataHelper.skillDataNameLookup.Keys,
                        SelectedValueBinding = new Binding(e.PropertyName)
                    };
                    e.Column = cb;
                    break;
                }
            }

            // TODO: Fix enum value display at some point.
        }

        private void Dg_items_AutoGeneratedColumns(object sender, EventArgs e) {
            if (HasName()) {
                dg_items.Columns.FindColumn(nameof(IMhwItem.Name)).DisplayIndex = 0;
            }

            if (IsGem()) {
                var skill1LevelIndex = dg_items.Columns.FindColumn(nameof(Gem.Skill_1_Level)).DisplayIndex - 1;
                dg_items.Columns.FindColumn(nameof(Gem.Skill_1)).DisplayIndex = skill1LevelIndex;
                dg_items.Columns.FindColumn(nameof(Gem.Skill_2)).DisplayIndex = skill1LevelIndex + 1;
            }

            if (IsArmor()) {
                var slot3SizeIndex = dg_items.Columns.FindColumn(nameof(Armor.Set_Skill_1_Level)).DisplayIndex - 1;
                dg_items.Columns.FindColumn(nameof(Armor.Set_Skill_1)).DisplayIndex = slot3SizeIndex;
                dg_items.Columns.FindColumn(nameof(Armor.Set_Skill_2)).DisplayIndex = slot3SizeIndex + 1;
                dg_items.Columns.FindColumn(nameof(Armor.Skill_1)).DisplayIndex = slot3SizeIndex + 2;
                dg_items.Columns.FindColumn(nameof(Armor.Skill_2)).DisplayIndex = slot3SizeIndex + 3;
                dg_items.Columns.FindColumn(nameof(Armor.Skill_3)).DisplayIndex = slot3SizeIndex + 4;

                var setGroupIndex = dg_items.Columns.FindColumn(nameof(Armor.Set_Group)).DisplayIndex;
                dg_items.Columns.FindColumn(nameof(Armor.Is_Permanent)).DisplayIndex = setGroupIndex + 1;
            }

            if (IsMelee()) {
                var part2Index = dg_items.Columns.FindColumn(nameof(Melee.Part_2_Id)).DisplayIndex;
                dg_items.Columns.FindColumn(nameof(Melee.Is_Fixed_Upgrade)).DisplayIndex = part2Index + 1;

                var rarityIndex = dg_items.Columns.FindColumn(nameof(Melee.Rarity)).DisplayIndex;
                dg_items.Columns.FindColumn(nameof(Melee.Sharpness_Quality)).DisplayIndex = rarityIndex + 1;
                dg_items.Columns.FindColumn(nameof(Melee.Sharpness_Amount)).DisplayIndex = rarityIndex + 2;
            }

            if (IsRanged()) {
                var part2Index = dg_items.Columns.FindColumn(nameof(Melee.Part_2_Id)).DisplayIndex;
                dg_items.Columns.FindColumn(nameof(Ranged.Is_Fixed_Upgrade)).DisplayIndex = part2Index + 1;

                var slotSize3Index = dg_items.Columns.FindColumn(nameof(Ranged.Slot_3_Size)).DisplayIndex;
                dg_items.Columns.FindColumn(nameof(Ranged.Special_Ammo_Type)).DisplayIndex = slotSize3Index + 1;
                dg_items.Columns.FindColumn(nameof(Ranged.Skill)).DisplayIndex = slotSize3Index + 1;
            }

            if (IsBottleTable() || IsShellTable()) {
                dg_items.Columns.FindColumn(nameof(BottleTable.Index)).DisplayIndex = 0;
            }

            foreach (var column in dg_items.Columns) {
                switch (column.Header.ToString()) {
                    case nameof(Armor.Set_Id):
                        column.Header = "Set (Layered) Id";
                        break;
                }

                if (column.Header.ToString().Contains("Hidden_Element")) {
                    column.Header = column.Header.ToString().Replace("Hidden_Element", "Element (Hidden)");
                }

                column.Header = ((string) column.Header).Replace("_", " ");
            }
        }

        private void dg_items_GotFocus(object sender, RoutedEventArgs e) {
            // Lookup for the source to be DataGridCell
            if (e.OriginalSource.GetType() == typeof(DataGridCell)) {
                // Starts the Edit on the row;
                dg_items.BeginEdit(e);
            }
        }

        private void Btn_open_Click(object sender, RoutedEventArgs e) {
            Open();
            if (string.IsNullOrEmpty(targetFile)) return;
            Load();

            dg_items.ItemsSource = null;
            dg_items.ItemsSource = items;
        }

        private void Btn_save_Click(object sender, RoutedEventArgs e) {
            if (string.IsNullOrEmpty(targetFile)) return;
            Save();
        }

        private void Btn_slot_cheat_Click(object sender, RoutedEventArgs e) {
            if (string.IsNullOrEmpty(targetFile)) return;

            if (!IsMelee() && !IsRanged() && !IsArmor()) return;

            foreach (ISlots item in items) {
                item.Slot_Count = 3;
                item.Slot_1_Size = 4;
                item.Slot_2_Size = 4;
                item.Slot_3_Size = 4;

                ((MhwItem) item).OnPropertyChanged();
            }
        }

        private void Btn_set_bonus_cheat_Click(object sender, RoutedEventArgs e) {
            if (string.IsNullOrEmpty(targetFile)) return;

            if (!IsArmor()) return;

            foreach (Armor item in items) {
                if (item.Set_Skill_1_Level > 0) {
                    item.Set_Skill_1_Level = 5;
                }

                item.OnPropertyChanged();
            }
        }

        private void Btn_skill_level_cheat_Click(object sender, RoutedEventArgs e) {
            if (string.IsNullOrEmpty(targetFile)) return;

            if (!IsGem() && !IsArmor()) return;

            foreach (var item in items) {
                switch (item) {
                    case Gem _: {
                        Gem gem = item;

                        gem.Skill_1_Level = 10;

                        if (gem.Skill_2_Level > 0) {
                            gem.Skill_2_Level = 10;
                        }

                        break;
                    }
                    case Armor _: {
                        Armor armor = item;

                        if (armor.Skill_1_Level > 0) {
                            armor.Skill_1_Level = 10;
                        }

                        if (armor.Skill_2_Level > 0) {
                            armor.Skill_2_Level = 10;
                        }

                        if (armor.Skill_3_Level > 0) {
                            armor.Skill_3_Level = 10;
                        }

                        break;
                    }
                }

                item.OnPropertyChanged();
            }
        }

        private void Btn_zenny_cheat_Click(object sender, RoutedEventArgs e) {
            if (string.IsNullOrEmpty(targetFile)) return;

            if (!IsItem() && !IsArmor() && !IsWeapon()) return;

            foreach (var item in items) {
                switch (item) {
                    case Item _: {
                        Item itm = item;

                        if (itm.Buy_Price > 0) {
                            itm.Buy_Price = 1;
                        }

                        break;
                    }
                    case Armor _: {
                        Armor armor = item;

                        if (armor.Cost > 0) {
                            armor.Cost = 1;
                        }

                        break;
                    }
                    case IWeapon _: {
                        IWeapon weapon = item;

                        if (weapon.Cost > 0) {
                            weapon.Cost = 1;
                        }

                        break;
                    }
                }

                item.OnPropertyChanged();
            }
        }

        private void Btn_damage_cheat_Click(object sender, RoutedEventArgs e) {
            if (string.IsNullOrEmpty(targetFile)) return;

            if (!IsWeapon()) return;

            foreach (IWeapon item in items) {
                if (item.Damage > 0) {
                    item.Damage = 5000;
                }

                ((MhwItem) item).OnPropertyChanged();
            }
        }

        private void Btn_enable_all_coatings_cheat_Click(object sender, RoutedEventArgs e) {
            if (string.IsNullOrEmpty(targetFile)) return;

            if (!IsBottleTable()) return;

            foreach (BottleTable item in items) {
                item.Close_Range = CoatingType.Yes;
                item.Power = CoatingType.Yes;
                item.Paralysis = CoatingType.Yes;
                item.Poison = CoatingType.Yes;
                item.Sleep = CoatingType.Yes;
                item.Blast = CoatingType.Yes;

                item.OnPropertyChanged();
            }
        }

        private void Btn_max_sharpness_cheat_Click(object sender, RoutedEventArgs e) {
            if (string.IsNullOrEmpty(targetFile)) return;

            if (!IsSharpness() && !IsMelee()) return;

            foreach (var item in items) {
                switch (item) {
                    case Sharpness _: {
                        Sharpness sharpness = item;

                        sharpness.Red = 10;
                        sharpness.Orange = 10;
                        sharpness.Yellow = 10;
                        sharpness.Green = 10;
                        sharpness.Blue = 10;
                        sharpness.White = 10;
                        sharpness.Purple = 400;

                        break;
                    }
                    case Melee _: {
                        Melee weapon = item;

                        if (weapon.Sharpness_Amount > 0) {
                            weapon.Sharpness_Amount = 5;
                        }

                        break;
                    }
                }

                item.OnPropertyChanged();
            }
        }

        private void Open() {
            var ofdResult = new OpenFileDialog {
                // ReSharper disable StringLiteralTypo
                Filter = $"MHW Data Files (*.wp_dat/_g, *.am_dat, *.sgpa, *.itm, *.bbtbl, *.kire)|{string.Join(";", FILE_TYPES)}",
                Multiselect = false
            };
            ofdResult.ShowDialog();

            targetFile = ofdResult.FileName;
        }

        private void Load() {
            items.Clear();
            Title = Path.GetFileName(targetFile);

            ushort initialOffset;
            ushort itemSize;

            if (IsMelee()) {
                initialOffset = Melee.InitialOffset;
                itemSize = Melee.StructSize;
            } else if (IsRanged()) {
                initialOffset = Ranged.InitialOffset;
                itemSize = Ranged.StructSize;
            } else if (IsArmor()) {
                initialOffset = Armor.InitialOffset;
                itemSize = Armor.StructSize;
            } else if (IsGem()) {
                initialOffset = Gem.InitialOffset;
                itemSize = Gem.StructSize;
            } else if (IsItem()) {
                initialOffset = Item.InitialOffset;
                itemSize = Item.StructSize;
            } else if (IsBottleTable()) {
                initialOffset = BottleTable.InitialOffset;
                itemSize = BottleTable.StructSize;
            } else if (IsArmUp()) {
                initialOffset = ArmUp.InitialOffset;
                itemSize = ArmUp.StructSize;
            } else if (IsSharpness()) {
                initialOffset = Sharpness.InitialOffset;
                itemSize = Sharpness.StructSize;
            } else if (IsSkillDat()) {
                initialOffset = SkillDat.InitialOffset;
                itemSize = SkillDat.StructSize;
            } else if (IsShellTable()) {
                initialOffset = ShellTable.InitialOffset;
                itemSize = ShellTable.StructSize;
            } else {
                return;
            }

            if (ENABLE_CHEAT_BUTTONS) {
                btn_slot_cheat.Visibility = IsArmor() || IsWeapon() ? Visibility.Visible : Visibility.Collapsed;
                btn_skill_level_cheat.Visibility = IsGem() || IsArmor() ? Visibility.Visible : Visibility.Collapsed;
                btn_set_bonus_cheat.Visibility = IsArmor() ? Visibility.Visible : Visibility.Collapsed;
                btn_zenny_cheat.Visibility = IsItem() || IsArmor() || IsWeapon() ? Visibility.Visible : Visibility.Collapsed;
                btn_damage_cheat.Visibility = IsWeapon() ? Visibility.Visible : Visibility.Collapsed;
                btn_enable_all_coatings_cheat.Visibility = IsBottleTable() ? Visibility.Visible : Visibility.Collapsed;
                btn_max_sharpness_cheat.Visibility = IsSharpness() || IsMelee() ? Visibility.Visible : Visibility.Collapsed;
            }

            var weaponFilename = Path.GetFileNameWithoutExtension(targetFile);

            using (var dat = new BinaryReader(new FileStream(targetFile, FileMode.Open, FileAccess.Read))) {
                var len = dat.BaseStream.Length;
                int offset = initialOffset;

                do {
                    var buff = new byte[itemSize];
                    dat.BaseStream.Seek(offset, SeekOrigin.Begin);
                    dat.Read(buff, 0, itemSize);

                    dynamic obj = null;

                    if (IsMelee()) {
                        obj = new Melee(buff, offset, weaponFilename);
                    } else if (IsRanged()) {
                        if (IsBow()) {
                            obj = new Ranged(buff, offset, weaponFilename);
                        } else if (IsBowGun()) {
                            obj = new BowGun(buff, offset, weaponFilename);
                        }
                    } else if (IsArmor()) {
                        obj = new Armor(buff, offset);
                    } else if (IsGem()) {
                        obj = new Gem(buff, offset);
                    } else if (IsItem()) {
                        obj = new Item(buff, offset);
                    } else if (IsBottleTable()) {
                        obj = new BottleTable(buff, offset);
                    } else if (IsArmUp()) {
                        obj = new ArmUp(buff, offset);
                    } else if (IsSharpness()) {
                        obj = new Sharpness(buff, offset);
                    } else if (IsSkillDat()) {
                        obj = new SkillDat(buff, offset);
                    } else if (IsShellTable()) {
                        obj = new ShellTable(buff, offset);
                    }

                    if (obj == null) return;

                    items.Add(obj);

                    offset += itemSize;
                } while (offset + itemSize <= len);
            }
        }

        private void Save() {
            using (var dat = new BinaryWriter(new FileStream(targetFile, FileMode.Open, FileAccess.Write))) {
                foreach (IMhwItem item in items) {
                    if (item.Offset == 0 || !item.Changed) continue;

                    var buff = item.Bytes;

                    dat.Seek(item.Offset, SeekOrigin.Begin);
                    dat.Write(buff);
                }
            }
        }

        private bool IsMelee() => Path.GetExtension(targetFile) == ".wp_dat";
        private bool IsRanged() => Path.GetExtension(targetFile) == ".wp_dat_g";
        private bool IsBow() => Path.GetFileName(targetFile).StartsWith("bow");
        private bool IsBowGun() => Path.GetFileName(targetFile).StartsWith("lbg") || Path.GetFileName(targetFile).StartsWith("hbg");
        private bool IsWeapon() => IsMelee() || IsRanged();
        private bool IsArmor() => Path.GetExtension(targetFile) == ".am_dat";
        private bool IsGem() => Path.GetExtension(targetFile) == ".sgpa";
        private bool IsItem() => Path.GetExtension(targetFile) == ".itm";
        private bool IsBottleTable() => Path.GetExtension(targetFile) == ".bbtbl";
        private bool IsArmUp() => Path.GetExtension(targetFile) == ".arm_up";
        private bool IsSharpness() => Path.GetExtension(targetFile) == ".kire";
        private bool IsSkillDat() => Path.GetExtension(targetFile) == ".skl_dat";
        private bool IsShellTable() => Path.GetExtension(targetFile) == ".shl_tbl";
        private bool HasName() => dg_items.Columns.FirstOrDefault(x => x.Header.ToString() == "Name") != null;
    }
}