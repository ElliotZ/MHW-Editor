<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(TargetDir)\MHW-Template.dll" #>
<#@ parameter type="System.String" name="_namespace" #>
<#@ parameter type="System.String" name="className" #>
<#@ parameter type="MHW_Template.MhwStructData" name="structData" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ import namespace="System.Text.RegularExpressions" #>
using System.ComponentModel;
using MHW_Template;

namespace <#= _namespace #> {
    public partial class <#= className #> {
        public const uint StructSize = <#= structData.size #>;
        public const ulong InitialOffset = <#= structData.offsetInitial #>;
        public const long EntryCountOffset = <#= structData.entryCountOffset #>;
<#
    var compiler = new CSharpCodeProvider();
    foreach (var entry in structData.entries) {
        var name = Regex.Replace(entry.name, @"[^\w\d]+", "_");
        var typeString = compiler.GetTypeOutput(entry.type);
        string returnString;
        var setCast = "";
        var getCast = "";

        if (entry.enumReturn == null) {
            returnString = typeString;
        } else {
            returnString = compiler.GetTypeOutput(entry.enumReturn);
            getCast = $"({returnString}) ";
            setCast = $"({typeString}) ";
        }

#>
        [DisplayName("<#= entry.name #>")]
        <#= entry.accessLevel #> <#= returnString #> <#= name #> {
            get => <#= getCast #>GetData<<#= typeString #>>(<#= entry.offset #>);
<#
        if (!entry.readOnly) {
#>
            set {
                SetData(<#= entry.offset #>, <#= setCast #><#= entry.valueString #>);
                OnPropertyChanged(nameof(<#= name #>));
            }
<#
        }
#>
        }
<#
    }
#>
    }
}